{"ast":null,"code":"import{createSlice,createAsyncThunk}from'@reduxjs/toolkit';import{authApi}from'../../services/api';const initialState={isAuthenticated:!!localStorage.getItem('token'),user:null,token:localStorage.getItem('token'),loading:false,error:null};const getErrorMessage=error=>{if(error&&typeof error==='object'&&'response'in error){var _apiError$response,_apiError$response$da;const apiError=error;const detail=(_apiError$response=apiError.response)===null||_apiError$response===void 0?void 0:(_apiError$response$da=_apiError$response.data)===null||_apiError$response$da===void 0?void 0:_apiError$response$da.detail;return typeof detail==='string'?detail:'Login failed';}return'Login failed';};// Async thunks\nexport const login=createAsyncThunk('auth/login',async(credentials,_ref)=>{let{rejectWithValue}=_ref;try{const response=await authApi.login(credentials);localStorage.setItem('token',response.access_token);return response;}catch(error){return rejectWithValue(getErrorMessage(error));}});export const verifyToken=createAsyncThunk('auth/verifyToken',async(_,_ref2)=>{let{rejectWithValue}=_ref2;try{const response=await authApi.verifyToken();return response;}catch(error){localStorage.removeItem('token');return rejectWithValue('Token verification failed');}});const authSlice=createSlice({name:'auth',initialState,reducers:{logout:state=>{state.isAuthenticated=false;state.user=null;state.token=null;localStorage.removeItem('token');},clearError:state=>{state.error=null;}},extraReducers:builder=>{builder// Login\n.addCase(login.pending,state=>{state.loading=true;state.error=null;}).addCase(login.fulfilled,(state,action)=>{state.loading=false;state.isAuthenticated=true;state.token=action.payload.access_token;state.error=null;}).addCase(login.rejected,(state,action)=>{state.loading=false;state.error=action.payload;})// Verify token\n.addCase(verifyToken.pending,state=>{state.loading=true;}).addCase(verifyToken.fulfilled,(state,action)=>{state.loading=false;state.user={username:action.payload.user};}).addCase(verifyToken.rejected,state=>{state.loading=false;state.isAuthenticated=false;state.token=null;});}});export const{logout,clearError}=authSlice.actions;export default authSlice.reducer;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}