version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: techlabs-postgres
    environment:
      POSTGRES_DB: techlabs_automation
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: techlabs-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  api:
    build:
      context: ./api
      dockerfile: Dockerfile.dev
    container_name: techlabs-api
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=techlabs_automation
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-12345
      - DEBUG=true
      - CORS_ORIGINS=http://localhost:3000
    ports:
      - "8000:8000"
    volumes:
      - ./api:/app
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker-in-Docker if needed
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery-worker:
    build:
      context: ./api
      dockerfile: Dockerfile.dev
    container_name: techlabs-celery-worker
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=techlabs_automation
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-12345
    volumes:
      - ./api:/app
      - ./terraform:/terraform
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A main.celery worker --loglevel=info
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./api
      dockerfile: Dockerfile.dev
    container_name: techlabs-celery-beat
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=techlabs_automation
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-12345
    volumes:
      - ./api:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A main.celery beat --loglevel=info
    restart: unless-stopped

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: techlabs-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api
    stdin_open: true
    tty: true

  # Terraform CLI container (for testing)
  terraform:
    image: hashicorp/terraform:1.5
    container_name: techlabs-terraform
    volumes:
      - ./terraform:/workspace
    working_dir: /workspace
    entrypoint: ["tail", "-f", "/dev/null"]  # Keep container running
    profiles:
      - tools  # Only start with --profile tools

  # PGAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: techlabs-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@techlabs.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    profiles:
      - tools  # Only start with --profile tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  default:
    name: techlabs-network