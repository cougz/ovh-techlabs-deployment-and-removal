{"ast":null,"code":"/**\n * Parse CSV text into attendee data\n * Expected format: username,email per line\n */export const parseCsvAttendees=csvText=>{const errors=[];const attendees=[];const lines=csvText.split('\\n');for(let i=0;i<lines.length;i++){const lineNumber=i+1;const line=lines[i].trim();// Skip empty lines\nif(line===''){continue;}const parts=line.split(',');if(parts.length<2){errors.push({lineNumber,message:'Missing email address',line});continue;}const username=parts[0].trim();const email=parts[1].trim();if(!username){errors.push({lineNumber,message:'Missing username',line});continue;}if(!email){errors.push({lineNumber,message:'Missing email address',line});continue;}attendees.push({username,email,lineNumber});}if(errors.length>0){return{success:false,errors};}return{success:true,data:attendees};};/**\n * Validate parsed attendee data\n */export const validateAttendeeData=attendees=>{const errors=[];const seenUsernames=new Map();const seenEmails=new Map();for(const attendee of attendees){// Validate username length\nif(attendee.username.length<2){errors.push({lineNumber:attendee.lineNumber,message:'Username must be at least 2 characters long',field:'username',value:attendee.username});}if(attendee.username.length>50){errors.push({lineNumber:attendee.lineNumber,message:'Username must be less than 50 characters',field:'username',value:attendee.username});}// Validate username format - prioritize specific error messages\nif(attendee.username.includes('.')){errors.push({lineNumber:attendee.lineNumber,message:'Username cannot contain dots (.) - use dashes (-) instead',field:'username',value:attendee.username});}else if(attendee.username.includes(' ')){errors.push({lineNumber:attendee.lineNumber,message:'Username cannot contain spaces - use dashes (-) instead',field:'username',value:attendee.username});}else{// Validate username format - only allowed characters (alphanumeric, -, _, +)\nconst usernameRegex=/^[a-zA-Z0-9\\-_+]+$/;if(!usernameRegex.test(attendee.username)){errors.push({lineNumber:attendee.lineNumber,message:'Username can only contain letters, numbers, hyphens (-), underscores (_), and plus (+) symbols',field:'username',value:attendee.username});}}// Validate email format\nconst emailRegex=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;if(!emailRegex.test(attendee.email)){errors.push({lineNumber:attendee.lineNumber,message:'Invalid email format',field:'email',value:attendee.email});}// Check for duplicate usernames\nconst existingUsernameLine=seenUsernames.get(attendee.username);if(existingUsernameLine!==undefined){errors.push({lineNumber:attendee.lineNumber,message:`Username already exists in the list (first seen on line ${existingUsernameLine})`,field:'username',value:attendee.username});}else{seenUsernames.set(attendee.username,attendee.lineNumber);}// Check for duplicate emails\nconst existingEmailLine=seenEmails.get(attendee.email);if(existingEmailLine!==undefined){errors.push({lineNumber:attendee.lineNumber,message:`Email already exists in the list (first seen on line ${existingEmailLine})`,field:'email',value:attendee.email});}else{seenEmails.set(attendee.email,attendee.lineNumber);}}if(errors.length>0){return{success:false,errors};}return{success:true,data:attendees};};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}