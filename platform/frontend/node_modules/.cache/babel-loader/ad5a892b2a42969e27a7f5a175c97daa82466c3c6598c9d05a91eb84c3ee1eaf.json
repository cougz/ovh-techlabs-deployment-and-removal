{"ast":null,"code":"/**\n * Centralized status utility functions for workshop and attendee status management\n *//**\n * Calculate the effective status of a workshop based on attendee deployment states\n * This centralizes the logic that was duplicated across WorkshopList, Dashboard, and WorkshopDetail\n */export function getEffectiveStatus(workshop){// For workshops with non-planning status, use the database status directly\nif(workshop.status!=='planning'){return workshop.status;}// For planning workshops, calculate based on attendee deployment states\nif('active_attendees'in workshop&&'attendee_count'in workshop){const{active_attendees,attendee_count}=workshop;// All attendees deployed\nif(attendee_count>0&&active_attendees===attendee_count){return'active';}// Some attendees deployed (partially deployed)\nif(active_attendees>0&&active_attendees<attendee_count){return'deploying';}// No attendees deployed or no attendees exist\nreturn'planning';}// Fallback for workshops without attendee count data\nreturn workshop.status;}/**\n * Get the appropriate CSS class for a status badge\n */export function getStatusBadgeClass(status){const baseClasses='inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium';switch(status){case'active':return`${baseClasses} bg-success-100 text-success-800 dark:bg-success-900 dark:text-success-200`;case'deploying':return`${baseClasses} bg-warning-100 text-warning-800 dark:bg-warning-900 dark:text-warning-200`;case'failed':return`${baseClasses} bg-danger-100 text-danger-800 dark:bg-danger-900 dark:text-danger-200`;case'completed':return`${baseClasses} bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-200`;case'deleting':return`${baseClasses} bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200`;case'queued':return`${baseClasses} bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200`;case'maintenance':return`${baseClasses} bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200`;case'suspended':return`${baseClasses} bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200`;case'planning':default:return`${baseClasses} bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200`;}}/**\n * Get the appropriate icon class for a status\n */export function getStatusIconClass(status){switch(status){case'active':return'text-success-500';case'deploying':return'text-warning-500 animate-spin';case'failed':return'text-danger-500';case'completed':return'text-primary-500';case'deleting':return'text-danger-500 animate-spin';case'queued':return'text-purple-500';case'maintenance':return'text-yellow-500';case'suspended':return'text-indigo-500';case'planning':default:return'text-gray-500';}}/**\n * Get human-readable status label\n */export function getStatusLabel(status){switch(status){case'active':return'Active';case'deploying':return'Deploying';case'failed':return'Failed';case'completed':return'Completed';case'deleting':return'Deleting';case'queued':return'Queued';case'maintenance':return'Maintenance';case'suspended':return'Suspended';case'planning':return'Planning';default:return status.charAt(0).toUpperCase()+status.slice(1);}}/**\n * Get appropriate icon component name for a status\n */export function getStatusIconName(status){switch(status){case'active':return'CheckCircleIcon';case'deploying':return'ClockIcon';case'failed':return'ExclamationTriangleIcon';case'completed':return'CheckBadgeIcon';case'deleting':return'TrashIcon';case'queued':return'QueueListIcon';case'maintenance':return'WrenchScrewdriverIcon';case'suspended':return'PauseIcon';case'planning':return'DocumentIcon';default:return'ClockIcon';}}/**\n * Determine if a status represents an active/running state\n */export function isActiveStatus(status){return['active','deploying','deleting','queued'].includes(status);}/**\n * Determine if a status represents a completed/final state\n */export function isFinalStatus(status){return['completed','failed','deleted'].includes(status);}/**\n * Get workshop deployment progress information\n */export function getWorkshopProgress(workshop){if('active_attendees'in workshop&&'attendee_count'in workshop){const{active_attendees,attendee_count}=workshop;if(attendee_count===0){return{percentage:100,completedCount:0,totalCount:0,description:'No attendees to deploy'};}const percentage=Math.round(active_attendees/attendee_count*100);const effectiveStatus=getEffectiveStatus(workshop);let description='';switch(effectiveStatus){case'active':description=`All ${attendee_count} attendees deployed`;break;case'deploying':description=`${active_attendees} of ${attendee_count} attendees deployed`;break;case'planning':description='Deployment not started';break;default:description=`Status: ${getStatusLabel(effectiveStatus)}`;}return{percentage,completedCount:active_attendees,totalCount:attendee_count,description};}// Fallback for workshops without attendee data\nreturn{percentage:0,completedCount:0,totalCount:0,description:`Status: ${getStatusLabel(workshop.status)}`};}/**\n * Check if a workshop needs cleanup (has active resources)\n */export function needsCleanup(workshop){const effectiveStatus=getEffectiveStatus(workshop);// Workshop needs cleanup if it's active or completed and has active attendees\nif(['active','completed'].includes(effectiveStatus)){if('active_attendees'in workshop){return workshop.active_attendees>0;}}return false;}/**\n * Sort workshops by status priority (active first, then deploying, etc.)\n */export function sortByStatusPriority(workshops){const statusPriority={'failed':1,// Highest priority - needs attention\n'deploying':2,// Currently in progress\n'active':3,// Running workshops\n'deleting':4,// Being cleaned up\n'completed':5,// Finished but may have resources\n'planning':6,// Not yet started\n'suspended':7,// Temporarily paused\n'maintenance':8,// In maintenance\n'queued':9// Waiting to start\n};return[...workshops].sort((a,b)=>{const aStatus=getEffectiveStatus(a);const bStatus=getEffectiveStatus(b);const aPriority=statusPriority[aStatus]||10;const bPriority=statusPriority[bStatus]||10;return aPriority-bPriority;});}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}