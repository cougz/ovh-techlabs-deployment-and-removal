{"ast":null,"code":"import { get as t, set as e } from \"react-hook-form\";\nconst s = (e, s, o) => {\n    if (e && \"reportValidity\" in e) {\n      const r = t(o, s);\n      e.setCustomValidity(r && r.message || \"\"), e.reportValidity();\n    }\n  },\n  o = (t, e) => {\n    for (const o in e.fields) {\n      const r = e.fields[o];\n      r && r.ref && \"reportValidity\" in r.ref ? s(r.ref, o, t) : r.refs && r.refs.forEach(e => s(e, o, t));\n    }\n  },\n  r = (s, r) => {\n    r.shouldUseNativeValidation && o(s, r);\n    const f = {};\n    for (const o in s) {\n      const n = t(r.fields, o),\n        a = Object.assign(s[o] || {}, {\n          ref: n && n.ref\n        });\n      if (i(r.names || Object.keys(s), o)) {\n        const s = Object.assign({}, t(f, o));\n        e(s, \"root\", a), e(f, o, s);\n      } else e(f, o, a);\n    }\n    return f;\n  },\n  i = (t, e) => t.some(t => t.startsWith(e + \".\"));\nexport { r as toNestErrors, o as validateFieldsNatively };\n//# sourceMappingURL=resolvers.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}